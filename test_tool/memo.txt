使うモジュール：folium

地図データ読み込み
地図上マップピン(データテーブル：緯度・経度・簡易的な名称)
｜
｜＿コメントテーブル(各マップピンのIDごとに1つのコメントテーブルをそれぞれ紐づける)
｜＿公式HPや店舗情報がある場合は遷移先URLのテーブルをつくって紐づけ

各情報を地図にオーバーレイして表示
平泉・一関テンポマップから事前に書く場所の情報を読み込んで表示しておく

追加マップピンの設定
　建物等の目標物がある場合は目標物につき1つのマップピン
　フィールドだけの場合は50m単位で区切る
　すでにマップピンがある場所には重複設定不可
　Folium + MarkerClusterでズームアウト時のマップピンの集約表示を可能にする



選択肢
1. 新たにマップピンを追加
　初めは基本情報しか登録できない機能で良い
2. 既存のマップピンに情報を追加...情報追加数をcountする。countが大きいほどマップピンを強調表示する
　1. HPや公式ブログなどのURLへ遷移する場合
　2. ユーザーがコメントを追加する場合
　3. 店舗管理者がコメントを追加する場合(上部固定)
3. マップピンの削除(一手数のカウントで削除)
3. マップピン同士をグループ化してルート表示

追加で実装出来たら嬉しい機能
・リアルタイムの天気情報をオーバーレイして色表示
・マップピンからマップピンへの所要時間をルート上に表示

ルート表示のユーザー単位の保存・AIを用いたキーワード検索

foliumだとjavascriptでの操作性と綺麗なマップ整理が実現できる
　leaflet + jsでの挙動をpythonでも管理できるように整形したかんじ。バックエンドをpythonで管理することが可能
html,jsの基礎知識あたりが必要かもしれない

サーバーに関する処理は Flask + SQLを使うといいかも
データベースが複雑化しない・量が大きすぎない場合はSQLliteで充分かもしれない

OpenMapDataはビジュアルが少し弱い・シンプルかつ見やすいUIにするなら、
オリジナル：情報量が多い・ごちゃごちゃしている
タイルレイヤを重ね合わせる必要があるかも：
色味の変更・グーグルマップ的なビジュアルに設定している設定ファイルがあるらしいのでそれを使うのもあり
白黒データ・地理院の高低表現・線形データ読み取りなどができる

foliumでの地図表現下地
大元：OpenMapData
↑
既存のベースレイヤをremoveしてベーススタイルを指定する必要がある

オーバーレイヤー
限定地域のオーバーレイヤー：国土地理院データ or 平泉市・一関市から調査データを持ってくるのもあり
色味のオーバーレイヤー：タイルを使う
表示UIのオーバーレイやー(デザイン的な要素)：googleMAPチックなタイルがあるのでそれを用いるのが一番見やすくなると思われる

3D表現を取り入れたい場合は、Celiumというツールを使えばできなくはない
ただ、pythonで3Dの表現をするには限界があり、他のAIツールや、言語を学ぶ必要がでてくる

高低表現が線分で示されてると少し見づらい…色味で表現 or 見やすいアイコンとして周辺情報を追加する必要があると思う
基本情報はOpenstreetMapと同じスタイルを適用
色味：単色で少し見づらいため、スタイルをremove...GoogleMap風の色味スタイルを提供しているモジュールを探して適用
文字情報：多くの情報が密集している地帯は常時表示だと非常に見づらい。
　　　　　一画面上に表示する情報量を指定できるライブラリを探す
　　　　　　　ズームアウトで細かい情報を省略・ズームインで情報量を増やし、画面上の総情報量を常時同じ質量に固定する


一例：
      //最初のベースタイル
      baseLayerChage();

    function baseLayerChage() {
      //既存のベースレイヤをremoveする
      for (var key in baseMaps) {
        if (map.hasLayer(baseMaps[key]) == true) {
          map.removeLayer(baseMaps[key]);
        }
      }
      //選択されたベースレイヤをmapに設定する
      var sel = document.getElementById("selectBaseLayer");
      var selTile = sel.options[sel.selectedIndex].value;
      baseMaps[selTile].addTo(map);
    }

[ブラウザ Leaflet]
    ├─ タイル取得 → カスタムタイルサーバー
    ├─ Ajax GET /api/pins?bounds=...
    ├─ Ajax POST /api/pins (ピン追加)
    └─ Ajax GET/POST /api/bookmarks

[Flask サーバー]
    ├─ /api/pins  CRUD
    ├─ /api/bookmarks CRUD
    └─ SQLAlchemy で DB (ユーザーごとのピン・ブックマーク保存)

[DB]
    ├─ pins テーブル (id, lat, lng, title, description, user_id)
    ├─ bookmarks テーブル (id, user_id, pin_id, route_id)
    └─ users テーブル

CSRF未対応なので悪意あるリクエストを送信される可能性がある
